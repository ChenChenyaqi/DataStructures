package com.BasedAscension.orderlyTable;

/**
 * 有序表
 * 可以实现有序表的结构
 * 平衡二叉树、SB树、红黑树、跳表(skip list)
 *
 * BST树的局限，查找、添加容易，删除困难
 *      找到删除的节点 的右子树中，最左 的那个，把最左的这个的右子树交给它的父级，再放到要删除的节点的位置
 *
 *  左旋右旋：
 *      左旋：头节点倒向左边，头节点的右边作为新的头，右节点的左子树交给头节点
 *      右旋：头节点倒向右边，左节点作为新的头，左节点的右子树交给头节点
 */
public class AVLTree {



}
